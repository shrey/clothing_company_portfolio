{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess } from './user.action';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  console.log(\"it works\");\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/rajeshdubey/Desktop/Stuff/react_course/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInFailure","signInSuccess","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","isUserAuthenticated","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","console","log","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,GAAnB,EAAuBC,GAAvB,EAA2BC,IAA3B,QAAsC,oBAAtC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,IAAR,EAAaC,cAAb,EAA4BC,yBAA5B,EAAsDC,cAAtD,QAA2E,+BAA3E;AACA,SAAQC,aAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAChD,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACI,yBAAD,EAA2BK,QAA3B,CAA1B;AAEA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACS,aAAa,CAAC;AACpBM,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG,IAAb;AAFiB,KAAD,CAAd,CAAT;AAGI,GAPN,CAQE,OAAMC,KAAN,EAAY;AACR,UAAMjB,GAAG,CAACQ,aAAa,CAACS,KAAD,CAAd,CAAT;AACH;AAEJ;AACD,OAAO,UAAUC,mBAAV,GAA+B;AACjC,MAAG;AACA,UAAMP,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACA,QAAG,CAACI,QAAJ,EAAc;AACd,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACF,GAJD,CAIC,OAAMM,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACQ,aAAa,CAACS,KAAD,CAAd,CAAT;AACH;AACL;AACD,OAAO,UAAUE,gBAAV,GAA4B;AAC/B,MAAG;AACC,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAACiB,eAAL,CAAqBhB,cAArB,CAArB;AACA,UAAMK,uBAAuB,CAACU,IAAD,CAA7B;AACH,GAHD,CAGC,OAAMH,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACQ,aAAa,CAACS,KAAD,CAAd,CAAT;AACH;AACJ;AACD,OAAO,UAAUK,mBAAV,GAA+B;AAClC,QAAMvB,UAAU,CAACI,eAAe,CAACoB,oBAAjB,EAAuCJ,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUK,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP;AAAV,CAA1B,EAAsD;AACzDC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,MAAG;AAEC,UAAM;AAACT,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAAC0B,0BAAL,CAAgCJ,KAAhC,EAAsCC,QAAtC,CAArB;AACA,UAAMjB,uBAAuB,CAACU,IAAD,CAA7B;AACH,GAJD,CAKA,OAAMH,KAAN,EAAY;AACR,UAAMjB,GAAG,CAACQ,aAAa,CAACS,KAAD,CAAd,CAAT;AACH;AACJ;AACD,OAAO,UAAUc,kBAAV,GAA8B;AACjC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,mBAAjB,EAAqCR,eAArC,CAAhB;AACH;AAED,OAAO,UAAUS,kBAAV,GAA8B;AACjC,QAAMlC,UAAU,CAACI,eAAe,CAAC+B,kBAAjB,EAAoChB,mBAApC,CAAhB;AACH;AACD,OAAO,UAAUiB,SAAV,GAAqB;AACxB,QAAMlC,GAAG,CAAC,CAACC,IAAI,CAACoB,mBAAD,CAAL,EAA2BpB,IAAI,CAAC6B,kBAAD,CAA/B,EAAoD7B,IAAI,CAAC+B,kBAAD,CAAxD,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest,put,all,call} from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport {auth,googleProvider,createUserProfileDocument,getCurrentUser} from '../../firebase/firebase.utils';\nimport {signInFailure,signInSuccess} from './user.action'\n\nexport function* getSnapshotFromUserAuth(userAuth){\n  try {   \n    const userRef = yield call(createUserProfileDocument,userAuth);\n     \n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n        id: userSnapshot.id,\n        ...userSnapshot.data() \n    }))}\n    catch(error){\n        yield put(signInFailure(error));\n    }\n    \n}\nexport function* isUserAuthenticated(){\n     try{\n        const userAuth = yield getCurrentUser();\n        if(!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n     }catch(error){\n         yield put(signInFailure(error))\n     }\n}\nexport function* signInWithGoogle(){\n    try{\n        const {user} = yield auth.signInWithPopup(googleProvider); \n        yield getSnapshotFromUserAuth(user);\n    }catch(error){\n        yield put(signInFailure(error));\n    }\n}\nexport function* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle) \n}\n\nexport function* signInWithEmail({payload: {email,password}}){\n    console.log(\"it works\");\n    try{\n        \n        const {user} = yield auth.signInWithEmailAndPassword(email,password);\n        yield getSnapshotFromUserAuth(user);\n    }\n    catch(error){\n        yield put(signInFailure(error));\n    }\n}\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail);\n}\n\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated);\n}\nexport function* userSagas(){\n    yield all([call(onGoogleSignInStart),call(onEmailSignInStart),call(onCheckUserSession)])\n}"]},"metadata":{},"sourceType":"module"}