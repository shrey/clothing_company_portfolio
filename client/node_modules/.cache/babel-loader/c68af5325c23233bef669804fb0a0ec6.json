{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess } from './user.action';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  const userRef = yield call(createUserProfileDocument, userAuth);\n  const userSnapshot = yield userRef.get();\n  return userSnapshot;\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userSnapshot = getSnapshotFromUserAuth(user);\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  console.log(\"it works\");\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    getSnapshotFromUserAuth(user);\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/rajeshdubey/Desktop/Stuff/react_course/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","signInFailure","signInSuccess","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","signInWithGoogle","user","signInWithPopup","id","data","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","console","log","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,GAAnB,EAAuBC,GAAvB,EAA2BC,IAA3B,QAAsC,oBAAtC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,IAAR,EAAaC,cAAb,EAA4BC,yBAA5B,QAA4D,+BAA5D;AACA,SAAQC,aAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAE9C,QAAMC,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA2BI,QAA3B,CAA1B;AAEA,QAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,SAAOD,YAAP;AACH;AACD,OAAO,UAAUE,gBAAV,GAA4B;AAC/B,MAAG;AACC,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMX,IAAI,CAACY,eAAL,CAAqBX,cAArB,CAArB;AACA,UAAMO,YAAY,GAAGH,uBAAuB,CAACM,IAAD,CAA5C;AAEA,UAAMf,GAAG,CAACQ,aAAa,CAAC;AACxBS,MAAAA,EAAE,EAAEL,YAAY,CAACK,EADO;AAExB,SAAGL,YAAY,CAACM,IAAb;AAFqB,KAAD,CAAd,CAAT;AAIP,GARG,CAQH,OAAMC,KAAN,EAAY;AACL,UAAMnB,GAAG,CAACO,aAAa,CAACY,KAAD,CAAd,CAAT;AACH;AACJ;AACD,OAAO,UAAUC,mBAAV,GAA+B;AAClC,QAAMrB,UAAU,CAACI,eAAe,CAACkB,oBAAjB,EAAuCP,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUQ,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP;AAAV,CAA1B,EAAsD;AACzDC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,MAAG;AAEC,UAAM;AAACZ,MAAAA;AAAD,QAAS,MAAMX,IAAI,CAACwB,0BAAL,CAAgCJ,KAAhC,EAAsCC,QAAtC,CAArB;AAEAhB,IAAAA,uBAAuB,CAACM,IAAD,CAAvB;AAEA,UAAMf,GAAG,CAACQ,aAAa,CAAC;AACpBS,MAAAA,EAAE,EAAEL,YAAY,CAACK,EADG;AAEpB,SAAGL,YAAY,CAACM,IAAb;AAFiB,KAAD,CAAd,CAAT;AAIH,GAVD,CAWA,OAAMC,KAAN,EAAY;AACR,UAAMnB,GAAG,CAACO,aAAa,CAACY,KAAD,CAAd,CAAT;AACH;AACJ;AACD,OAAO,UAAUU,kBAAV,GAA8B;AACjC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAqCR,eAArC,CAAhB;AACH;AACD,OAAO,UAAUS,SAAV,GAAqB;AACxB,QAAM9B,GAAG,CAAC,CAACC,IAAI,CAACkB,mBAAD,CAAL,EAA2BlB,IAAI,CAAC2B,kBAAD,CAA/B,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest,put,all,call} from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport {auth,googleProvider,createUserProfileDocument} from '../../firebase/firebase.utils';\nimport {signInFailure,signInSuccess} from './user.action'\n\nexport function* getSnapshotFromUserAuth(userAuth){\n     \n    const userRef = yield call(createUserProfileDocument,userAuth);\n     \n    const userSnapshot = yield userRef.get();\n    return userSnapshot\n}\nexport function* signInWithGoogle(){\n    try{\n        const {user} = yield auth.signInWithPopup(googleProvider); \n        const userSnapshot = getSnapshotFromUserAuth(user);\n        \n        yield put(signInSuccess({\n        id: userSnapshot.id ,\n        ...userSnapshot.data()\n        }))\n}catch(error){\n        yield put(signInFailure(error));\n    }\n}\nexport function* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle) \n}\n\nexport function* signInWithEmail({payload: {email,password}}){\n    console.log(\"it works\");\n    try{\n        \n        const {user} = yield auth.signInWithEmailAndPassword(email,password);\n        \n        getSnapshotFromUserAuth(user);\n        \n        yield put(signInSuccess({\n            id: userSnapshot.id,\n            ...userSnapshot.data() \n        }))\n    }\n    catch(error){\n        yield put(signInFailure(error));\n    }\n}\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail);\n}\nexport function* userSagas(){\n    yield all([call(onGoogleSignInStart),call(onEmailSignInStart)])\n}"]},"metadata":{},"sourceType":"module"}