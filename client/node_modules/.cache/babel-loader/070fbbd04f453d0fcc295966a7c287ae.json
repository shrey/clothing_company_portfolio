{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyArc1oXwGtRFxlFyjuNP64J8Z85DVfInRY\",\n  authDomain: \"crwn-db-35559.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-35559.firebaseio.com\",\n  projectId: \"crwn-db-35559\",\n  storageBucket: \"crwn-db-35559.appspot.com\",\n  messagingSenderId: \"270977083816\",\n  appId: \"1:270977083816:web:b514c772186c33fc7e559d\",\n  measurementId: \"G-BGH21XNKDM\"\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {}\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transfromedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transfromedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/rajeshdubey/Desktop/Stuff/react_course/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transfromedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n    apiKey: \"AIzaSyArc1oXwGtRFxlFyjuNP64J8Z85DVfInRY\",\n    authDomain: \"crwn-db-35559.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-35559.firebaseio.com\",\n    projectId: \"crwn-db-35559\",\n    storageBucket: \"crwn-db-35559.appspot.com\",\n    messagingSenderId: \"270977083816\",\n    appId: \"1:270977083816:web:b514c772186c33fc7e559d\",\n    measurementId: \"G-BGH21XNKDM\"\n  };\n\n  firebase.initializeApp(config); \n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  export const createUserProfileDocument = async (userAuth, additionalData)=>{\n        if(!userAuth) return;\n        const userRef = firestore.doc(`users/${userAuth.uid}`);\n        const snapShot = await userRef.get();\n        if(!snapShot.exists){\n            const {displayName, email} = userAuth;\n            const createdAt = new Date();\n            try{\n                await userRef.set({\n                   displayName,\n                   email,\n                   createdAt,\n                   ...additionalData \n                })\n            }catch(error){\n\n            }\n        }\n        return userRef;\n  }\n\n  export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n      const collectionRef = firestore.collection(collectionKey);\n      \n      const batch = firestore.batch();\n      objectsToAdd.forEach((obj =>{\n          const newDocRef = collectionRef.doc();\n          batch.set(newDocRef,obj);\n      }))\n      return await batch.commit();\n      \n  }\n  export const convertCollectionsSnapshotToMap = (collections) =>{\n    const transfromedCollection = collections.docs.map (doc => {\n        const {title,items} = doc.data();  \n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items\n        }\n    })\n    \n    \n    return transfromedCollection.reduce((accumulator,collection) => {\n        accumulator[collection.title.toLowerCase()] = collection;\n        return accumulator;\n    },{});\n  }\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\n  googleProvider.setCustomParameters({prompt: 'select_account'})\n  export const signInWithGoogle = ()=> auth.signInWithPopup(googleProvider);\n  export default firebase;"]},"metadata":{},"sourceType":"module"}