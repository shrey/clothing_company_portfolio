{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyArc1oXwGtRFxlFyjuNP64J8Z85DVfInRY\",\n  authDomain: \"crwn-db-35559.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-35559.firebaseio.com\",\n  projectId: \"crwn-db-35559\",\n  storageBucket: \"crwn-db-35559.appspot.com\",\n  messagingSenderId: \"270977083816\",\n  appId: \"1:270977083816:web:b514c772186c33fc7e559d\",\n  measurementId: \"G-BGH21XNKDM\"\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  const collectionRef = firestore.collection('users');\n  const collectionSnapshot = await collectionRef.get();\n  console.log(\"COLLECTION SNAPSHOT: \");\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {}\n  }\n\n  return userRef;\n};\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/rajeshdubey/Desktop/Stuff/react_course/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","collectionRef","collection","collectionSnapshot","console","log","docs","map","data","exists","displayName","email","createdAt","Date","set","error","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AACA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,sCAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,2BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWET,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,IAAI,GAAGX,QAAQ,CAACW,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGZ,QAAQ,CAACY,SAAT,EAAlB;AAEP,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAkC;AACrE,MAAG,CAACD,QAAJ,EAAc;AACd,QAAME,OAAO,GAAGJ,SAAS,CAACK,GAAV,CAAe,SAAQH,QAAQ,CAACI,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;AACA,QAAMC,aAAa,GAAGT,SAAS,CAACU,UAAV,CAAqB,OAArB,CAAtB;AACA,QAAMC,kBAAkB,GAAG,MAAMF,aAAa,CAACD,GAAd,EAAjC;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,IAAAA,UAAU,EAAEC,kBAAkB,CAACG,IAAnB,CAAwBC,GAAxB,CAA4BV,GAAG,IAAIA,GAAG,CAACW,IAAJ,EAAnC;AAAb,GAAZ;;AACA,MAAG,CAACT,QAAQ,CAACU,MAAb,EAAoB;AAChB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBjB,QAA7B;AACA,UAAMkB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAG;AACC,YAAMjB,OAAO,CAACkB,GAAR,CAAY;AACfJ,QAAAA,WADe;AAEfC,QAAAA,KAFe;AAGfC,QAAAA,SAHe;AAIf,WAAGjB;AAJY,OAAZ,CAAN;AAMH,KAPD,CAOC,OAAMoB,KAAN,EAAY,CAEZ;AACJ;;AACD,SAAOnB,OAAP;AACL,CAvBM;AAwBP,MAAMoB,QAAQ,GAAG,IAAIpC,QAAQ,CAACW,IAAT,CAAc0B,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAK7B,IAAI,CAAC8B,eAAL,CAAqBL,QAArB,CAA9B;AACP,eAAepC,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n    apiKey: \"AIzaSyArc1oXwGtRFxlFyjuNP64J8Z85DVfInRY\",\n    authDomain: \"crwn-db-35559.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-35559.firebaseio.com\",\n    projectId: \"crwn-db-35559\",\n    storageBucket: \"crwn-db-35559.appspot.com\",\n    messagingSenderId: \"270977083816\",\n    appId: \"1:270977083816:web:b514c772186c33fc7e559d\",\n    measurementId: \"G-BGH21XNKDM\"\n  };\n\n  firebase.initializeApp(config); \n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  export const createUserProfileDocument = async (userAuth, additionalData)=>{\n        if(!userAuth) return;\n        const userRef = firestore.doc(`users/${userAuth.uid}`);\n        const snapShot = await userRef.get();\n        const collectionRef = firestore.collection('users');\n        const collectionSnapshot = await collectionRef.get();\n        console.log(\"COLLECTION SNAPSHOT: \")\n        console.log({collection: collectionSnapshot.docs.map(doc => doc.data())})\n        if(!snapShot.exists){\n            const {displayName, email} = userAuth;\n            const createdAt = new Date();\n            try{\n                await userRef.set({\n                   displayName,\n                   email,\n                   createdAt,\n                   ...additionalData \n                })\n            }catch(error){\n\n            }\n        }\n        return userRef;\n  }\n  const provider = new firebase.auth.GoogleAuthProvider();\n  provider.setCustomParameters({prompt: 'select_account'})\n  export const signInWithGoogle = ()=> auth.signInWithPopup(provider);\n  export default firebase;"]},"metadata":{},"sourceType":"module"}